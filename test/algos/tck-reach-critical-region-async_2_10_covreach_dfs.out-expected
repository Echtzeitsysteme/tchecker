// COVERED_STATES 3
// REACHABLE true
// RUNNING_TIME_SECONDS  xxxx
// STORED_STATES 23
// VISITED_STATES 12
digraph critical_region_async_2_10 {
  14 [intval="id=0", vloc="<l,I,req,req,not_ready,not_ready>", zone="(0<=x1 & 0<=x2)"]
  13 [intval="id=0", vloc="<l,I,req,req,not_ready,testing>", zone="(0<=x1 & 0<=x2<=10 & 0<=x1-x2)"]
  15 [intval="id=0", vloc="<l,I,req,req,not_ready,requesting>", zone="(0<=x1 & 0<=x2)"]
  12 [intval="id=0", vloc="<l,I,req,req,testing,not_ready>", zone="(0<=x1<=10 & 0<=x2 & x1-x2<=0)"]
  11 [intval="id=0", vloc="<l,I,req,req,testing,testing>", zone="(0<=x1<=10 & 0<=x2<=10 & -10<=x1-x2<=0)"]
  8 [intval="id=0", vloc="<l,I,req,req,testing,requesting>", zone="(0<=x1<=10 & 0<=x2 & x1-x2<=10)"]
  19 [intval="id=0", vloc="<l,I,req,req,requesting,requesting>", zone="(0<=x1 & 0<=x2)"]
  18 [intval="id=1", vloc="<l,C,req,req,not_ready,not_ready>", zone="(0<=x1 & 0<=x2)"]
  16 [intval="id=1", vloc="<l,C,req,req,not_ready,testing>", zone="(0<=x1 & 0<=x2<=10 & 0<=x1-x2)"]
  17 [intval="id=1", vloc="<l,C,req,req,not_ready,requesting>", zone="(0<=x1 & 0<=x2)"]
  4 [intval="id=1", vloc="<l,C,req,req,testing,requesting>", zone="(0<=x1<=10 & 0<=x2 & x1-x2<=10)"]
  21 [intval="id=1", vloc="<l,C,req,req,requesting,requesting>", zone="(0<=x1 & 0<=x2)"]
  20 [intval="id=2", vloc="<l,C,req,req,requesting,requesting>", zone="(0<=x1 & 0<=x2)"]
  22 [intval="id=1", vloc="<l,C,req,req,testing2,requesting>", zone="(0<=x1<=10 & 0<=x2 & x1-x2<=10)"]
  9 [intval="id=0", vloc="<l,C,ack,req,critical,requesting>", zone="(0<=x1<=20 & 0<=x2 & x1-x2<=20)"]
  10 [intval="id=1", vloc="<l,C,ack,req,critical,requesting>", zone="(0<=x1<=20 & 0<=x2 & x1-x2<=20)"]
  3 [intval="id=0", vloc="<l,C,ack,req,error,requesting>", zone="(0<=x1 & 0<=x2)"]
  1 [intval="id=1", vloc="<l,C,ack,req,error,requesting>", zone="(0<=x1 & 0<=x2)"]
  2 [intval="id=2", vloc="<l,C,ack,req,error,requesting>", zone="(0<=x1 & 0<=x2)"]
  0 [intval="id=2", vloc="<l,C,ack,req,error,testing2>", zone="(0<=x1 & 0<=x2<=10 & -10<=x1-x2)"]
  5 [intval="id=0", vloc="<l,C,ack,ack,error,critical>", zone="(0<=x1 & 0<=x2<=20 & -20<=x1-x2)"]
  6 [intval="id=1", vloc="<l,C,ack,ack,error,critical>", zone="(0<=x1 & 0<=x2<=20 & -20<=x1-x2)"]
  7 [intval="id=0", vloc="<l,C,ack,ack,error,error>", zone="(0<=x1 & 0<=x2)"]
  8 -> 4 [edge_type="actual", vedge="<ID@id_eq_0,counter@id_eq_0>"]
  13 -> 16 [edge_type="actual", vedge="<ID@id_eq_0,counter@id_eq_0>"]
  14 -> 18 [edge_type="actual", vedge="<ID@id_eq_0,counter@id_eq_0>"]
  15 -> 17 [edge_type="actual", vedge="<ID@id_eq_0,counter@id_eq_0>"]
  19 -> 21 [edge_type="actual", vedge="<ID@id_eq_0,counter@id_eq_0>"]
  1 -> 2 [edge_type="actual", vedge="<ID@id_lt_2,counter@id_lt_2>"]
  3 -> 1 [edge_type="actual", vedge="<ID@id_lt_2,counter@id_lt_2>"]
  5 -> 6 [edge_type="actual", vedge="<ID@id_lt_2,counter@id_lt_2>"]
  9 -> 10 [edge_type="actual", vedge="<ID@id_lt_2,counter@id_lt_2>"]
  21 -> 20 [edge_type="actual", vedge="<ID@id_lt_2,counter@id_lt_2>"]
  2 -> 1 [edge_type="subsumption", vedge="<ID@id_eq_2,counter@id_eq_2>"]
  21 -> 9 [edge_type="actual", vedge="<ID@enter1,arbiter1@enter1,prodcell1@enter1>"]
  9 -> 22 [edge_type="actual", vedge="<ID@exit1,arbiter1@exit1,prodcell1@exit1>"]
  2 -> 5 [edge_type="actual", vedge="<ID@enter2,arbiter2@enter2,prodcell2@enter2>"]
  5 -> 0 [edge_type="actual", vedge="<ID@exit2,arbiter2@exit2,prodcell2@exit2>"]
  13 -> 11 [edge_type="actual", vedge="<prodcell1@tau>"]
  14 -> 12 [edge_type="actual", vedge="<prodcell1@tau>"]
  15 -> 8 [edge_type="actual", vedge="<prodcell1@tau>"]
  8 -> 15 [edge_type="subsumption", vedge="<prodcell1@tau>"]
  8 -> 19 [edge_type="actual", vedge="<prodcell1@tau>"]
  9 -> 3 [edge_type="actual", vedge="<prodcell1@tau>"]
  14 -> 13 [edge_type="actual", vedge="<prodcell2@tau>"]
  13 -> 14 [edge_type="subsumption", vedge="<prodcell2@tau>"]
  13 -> 15 [edge_type="actual", vedge="<prodcell2@tau>"]
  5 -> 7 [edge_type="actual", vedge="<prodcell2@tau>"]
}
